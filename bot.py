import logging
from aiogram import Bot, Dispatcher
from aiogram.enums import ParseMode
from aiogram.types import Message
from aiogram.client.default import DefaultBotProperties
from aiogram.dispatcher.event.bases import SkipHandler
from aiogram.dispatcher.router import Router
from aiogram.enums import ContentType
from aiogram import F
import asyncio
from ollama_api import ask_ollama
from config import TOKEN

# üîß –£–∫–∞–∂–∏ —Å–≤–æ–π —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
BOT_TOKEN = TOKEN

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

router = Router()
dp.include_router(router)

@router.message(F.text)
async def echo_handler(message: Message):
    try:
        # –®–∞–≥ 1: —Å–æ–æ–±—â–µ–Ω–∏–µ "–æ–∂–∏–¥–∞–π—Ç–µ"
        wait_msg = await message.answer("‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ, –æ—Ç–≤–µ—Ç –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è...")

        # –®–∞–≥ 2: –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞
        answer = ask_ollama(message.text, user_id=str(message.from_user.id))

        # –®–∞–≥ 3: –∑–∞–º–µ–Ω–∞ —Ç–µ–∫—Å—Ç–∞
        await bot.edit_message_text(
            chat_id=wait_msg.chat.id,
            message_id=wait_msg.message_id,
            text=answer
        )
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞.")

async def main():
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())

